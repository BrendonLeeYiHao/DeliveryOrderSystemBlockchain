/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package blockchainassignment;

import blockchain.Block;
import blockchain.Blockchain;
import blockchain.Transaction;
import static blockchainassignment.ViewTransactionPage_version2.username;
import crypto.Symmetric;
import digitalsignature.MySignature;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Random;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.security.Key;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.text.SimpleDateFormat;
import java.util.Base64;
import java.util.Date;
import java.util.List;
import java.util.concurrent.TimeUnit;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import keygenerator.KeyAccess;
import keygenerator.RandomSecretKey;

/**
 *
 * @author Acer
 */
public class DeliverymanShipmentOrder extends javax.swing.JFrame {

    
    /**
     * Display data from customer shipment order MakeShipmentOrder
     */
    
    private String deliveryman;
    private DefaultTableModel model;

    public DeliverymanShipmentOrder(String deliveryman) {
        this.deliveryman = deliveryman;
        initComponents();
        btnDisplay.doClick();
    }
    
    public DeliverymanShipmentOrder(){}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        lblVehiclePlate = new javax.swing.JLabel();
        lblRecipientAddress = new javax.swing.JLabel();
        txtCurrentLocation = new javax.swing.JTextField();
        btnSubmit = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        btnViewTransaction = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableOrder = new javax.swing.JTable();
        btnDisplay = new javax.swing.JButton();
        txtSender = new javax.swing.JTextField();
        txtVehiclePlate1 = new javax.swing.JTextField();
        lblOrderID = new javax.swing.JLabel();
        lblOrderID1 = new javax.swing.JLabel();
        txtOrderID1 = new javax.swing.JTextField();
        btnViewLedger = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblTitle.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        lblTitle.setText("Deliveryman Shipment Order");

        lblVehiclePlate.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        lblVehiclePlate.setText("Vehicle Plate");

        lblRecipientAddress.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        lblRecipientAddress.setText("Current Location");

        txtCurrentLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCurrentLocationActionPerformed(evt);
            }
        });

        btnSubmit.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnSubmit.setText("Submit");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        btnBack.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnViewTransaction.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        btnViewTransaction.setText("View Transaction");
        btnViewTransaction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewTransactionActionPerformed(evt);
            }
        });

        tableOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sender", "OrderID", "Sender Address", "Receipient Address", "Parcel Dimension", "Weight (kg)", "Fragility", "Description"
            }
        ));
        tableOrder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableOrderMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableOrder);

        btnDisplay.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnDisplay.setText("Display");
        btnDisplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisplayActionPerformed(evt);
            }
        });

        txtSender.setEditable(false);
        txtSender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSenderActionPerformed(evt);
            }
        });

        txtVehiclePlate1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtVehiclePlate1ActionPerformed(evt);
            }
        });

        lblOrderID.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        lblOrderID.setText("Order ID");

        lblOrderID1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        lblOrderID1.setText("Sender");

        txtOrderID1.setEditable(false);
        txtOrderID1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtOrderID1ActionPerformed(evt);
            }
        });

        btnViewLedger.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        btnViewLedger.setText("View Ledger");
        btnViewLedger.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewLedgerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnViewLedger, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblOrderID1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 102, Short.MAX_VALUE)
                                .addComponent(txtSender, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblVehiclePlate, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblRecipientAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblOrderID, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(67, 67, 67)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtCurrentLocation, javax.swing.GroupLayout.DEFAULT_SIZE, 214, Short.MAX_VALUE)
                                        .addComponent(txtVehiclePlate1, javax.swing.GroupLayout.Alignment.TRAILING))
                                    .addComponent(txtOrderID1))))
                        .addGap(233, 233, 233))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnViewTransaction, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 175, Short.MAX_VALUE)
                        .addComponent(lblTitle)
                        .addGap(161, 161, 161)
                        .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTitle)
                    .addComponent(btnBack)
                    .addComponent(btnViewTransaction))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblOrderID)
                                .addGap(19, 19, 19))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(txtOrderID1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(btnViewLedger)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblOrderID1)
                    .addComponent(txtSender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblVehiclePlate)
                    .addComponent(txtVehiclePlate1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCurrentLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblRecipientAddress))
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDisplay)
                    .addComponent(btnSubmit))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        Key secretKey = RandomSecretKey.create();
        String secretKeyString = Base64.getEncoder().encodeToString(secretKey.getEncoded());
        String sender = txtSender.getText();
        String orderID = txtOrderID1.getText();
        String vehicle = txtVehiclePlate1.getText();
        String currentLocation = txtCurrentLocation.getText();
        String transaction = orderID + " , " + vehicle + " , " + currentLocation;
        try{
            PublicKey publicKey = KeyAccess.getPublicKey("AllKeyPair/"+deliveryman+"PublicKey");
            PrivateKey privateKey = KeyAccess.getPrivateKey("AllKeyPair/"+deliveryman+"PrivateKey");
            MySignature sig = new MySignature();
            String signature = sig.sign(transaction, privateKey);

            if(sig.verify(transaction, signature, publicKey)){
                TimeUnit.SECONDS.sleep(5);
                JOptionPane.showMessageDialog(null, "Verified Successfully!");
                Transaction tranxLst = new Transaction();
                tranxLst.add(transaction);

                Blockchain bc = Blockchain.getInstance("master/chain.bin");
                String previousHash = bc.get().getLast().getBlockHeader().getCurrentHash();
                int index = bc.get().getLast().getBlockHeader().getIndex();
                Block b1 = new Block( previousHash );
                b1.getBlockHeader().setIndex( index + 1);
                b1.setTranxLst(tranxLst);
                bc.nextBlock(b1);
                bc.distribute();
                Delivery dso = new Delivery();
                dso.addBlockIndexIntoFile(sender, index+1, orderID , secretKeyString, deliveryman, vehicle, currentLocation);
            }
            else{
                System.out.println("Verification failed!");
            }
        }catch(Exception e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnSubmitActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnViewTransactionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewTransactionActionPerformed
//        new ViewTransactionPage(username).setVisible(true);

        ViewTransactionPage_version2 vv = new ViewTransactionPage_version2(deliveryman);
        vv.setVisible(true);        
    }//GEN-LAST:event_btnViewTransactionActionPerformed

    private void txtCurrentLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCurrentLocationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCurrentLocationActionPerformed

    private void btnDisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDisplayActionPerformed
        Blockchain bc = Blockchain.getInstance("master/chain.bin");

        List<String> indexLst = new ArrayList();
        List<String> publicKeyLst = new ArrayList();
        try{
            BufferedReader myfile = new BufferedReader(new FileReader("BlockIndex.txt"));
            String [] lineArr;
            String line;
            while((line = myfile.readLine())!=null){
                lineArr = line.split(" , ");
                if(lineArr.length == 4)
                    {if(lineArr[3].equals(deliveryman)){
                        indexLst.add(lineArr[1]);
                        publicKeyLst.add(lineArr[2]);
                    }
                }
            }
        }
        catch(IOException e){
            e.printStackTrace();
        }
        
        String allTransaction = "";
        String [] splitArray;
        int cnt = 0;
        Symmetric symm = new Symmetric();

        model = (DefaultTableModel)tableOrder.getModel();
        model.setRowCount(0);
        try{

            for(String index: indexLst){
                String publicKeyString = publicKeyLst.get(cnt);
                byte[] decodedKey = Base64.getDecoder().decode(publicKeyString);
                SecretKey originalKey = new SecretKeySpec(decodedKey, 0, decodedKey.length, "AES");
                long datetime = bc.get().get(Integer.parseInt(index)).getBlockHeader().getTimeStamp();
                Date date = new Date(datetime);
                SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                String formattedDateTime = dateFormat.format(date);
                String transaction = bc.get().get(Integer.parseInt(index)).getTranx().getTranxLst().get(0);
                splitArray = transaction.split(" , ");
               
                if(splitArray.length == 11){
                    Object[] rowData = new Object[]{splitArray[0], splitArray[1], symm.decrypt(splitArray[2], originalKey), symm.decrypt(splitArray[3], originalKey), 
                        splitArray[4], splitArray[5], splitArray[6], splitArray[7]};
                    model.addRow(rowData);
                }
                cnt++;
            }
        }catch(Exception e){
            e.printStackTrace();
        }

    }//GEN-LAST:event_btnDisplayActionPerformed

    private void txtSenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSenderActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txtSenderActionPerformed

    private void txtVehiclePlate1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtVehiclePlate1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtVehiclePlate1ActionPerformed

    private void tableOrderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableOrderMouseClicked
        // TODO add your handling code here:
        int selectedRow = tableOrder.getSelectedRow(); 
        DefaultTableModel model = (DefaultTableModel) tableOrder.getModel();
        txtSender.setText(model.getValueAt(tableOrder.convertRowIndexToModel(selectedRow), 0).toString());
        txtOrderID1.setText(model.getValueAt(tableOrder.convertRowIndexToModel(selectedRow), 1).toString());
    }//GEN-LAST:event_tableOrderMouseClicked

    private void txtOrderID1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtOrderID1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtOrderID1ActionPerformed

    private void btnViewLedgerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewLedgerActionPerformed
        Ledger l = new Ledger();
        l.setVisible(true);
    }//GEN-LAST:event_btnViewLedgerActionPerformed

    public void displayOrdersByDeliveryman(String deliveryman) throws Exception {
//         Load the master.bin file
    }
    
    // Helper method to get the order IDs assigned to the specified deliveryman
    private ArrayList<String> getOrderIDsForDeliveryman(String deliveryman) throws IOException {
        ArrayList<String> orderIDs = new ArrayList<>();

        // Load the order index file for the specified deliveryman
        String filename = "AllBlockIndex/" + deliveryman + "BlockIndex.txt";
        File file = new File(filename);
        if (!file.exists()) {
            throw new IOException("Order index file not found for deliveryman: " + deliveryman);
        }

        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            String line;
            while ((line = reader.readLine()) != null) {
                orderIDs.add(line);
            }
        }

        return orderIDs;
    }

//    public String getUniqueId(){
//        Random r = new Random();
//        return "Order" + Integer.toString(r.nextInt(99999-00000) + 00000);
//    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DeliverymanShipmentOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DeliverymanShipmentOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DeliverymanShipmentOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DeliverymanShipmentOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new DeliverymanShipmentOrder().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDisplay;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JButton btnViewLedger;
    private javax.swing.JButton btnViewTransaction;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblOrderID;
    private javax.swing.JLabel lblOrderID1;
    private javax.swing.JLabel lblRecipientAddress;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblVehiclePlate;
    private javax.swing.JTable tableOrder;
    private javax.swing.JTextField txtCurrentLocation;
    private javax.swing.JTextField txtOrderID1;
    private javax.swing.JTextField txtSender;
    private javax.swing.JTextField txtVehiclePlate1;
    // End of variables declaration//GEN-END:variables
}
