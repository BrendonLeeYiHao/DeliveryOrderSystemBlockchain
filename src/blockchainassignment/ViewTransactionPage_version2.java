/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package blockchainassignment;

import blockchain.Blockchain;
import crypto.Symmetric;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Base64;
import java.util.Date;
import java.util.List;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.table.DefaultTableModel;
import org.apache.commons.codec.DecoderException;

/**
 *
 * @author Acer
 */
public class ViewTransactionPage_version2 extends javax.swing.JFrame {
    
    public static String username;
    /**
     * Creates new form ViewTransactionPage
     */
    public ViewTransactionPage_version2(String name) {
        initComponents(); // Initialize the components first

        username = name; // Set the global variable to the passed-in name

        // Clear any existing rows in the table
        DefaultTableModel model = (DefaultTableModel) tableTransac.getModel();
        model.setRowCount(0);
        try {
            // Read the BlockIndex.txt file
            BufferedReader reader = new BufferedReader(new FileReader("BlockIndex.txt"));
            String line;
            while ((line = reader.readLine()) != null) {
                String[] splitArray = line.split(" , ");
                if (splitArray.length == 7 && splitArray[4].equals(username)) {
                    // If the line has 11 elements and the username matches, add a row to the table
                    Object[] rowData = new Object[]{splitArray[0], splitArray[2], splitArray[5], splitArray[6]};
                    model.addRow(rowData);
                }
            }

            reader.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
//        initComponents();
//        username = name;
//        Blockchain bc = Blockchain.getInstance("master/chain.bin");
//
//        List<String> indexLst = new ArrayList();
//        List<String> publicKeyLst = new ArrayList();
//        try{
//            BufferedReader myfile = new BufferedReader(new FileReader("BlockIndex.txt"));
//            String [] lineArr;
//            String line;
//            while((line = myfile.readLine())!=null){
//                lineArr = line.split(" , ");
//                if(lineArr.length == 7)  //5
//                System.out.println("TESTING");
//                    {if(lineArr[4].equals(username)){//3
//                        indexLst.add(lineArr[1]);
//                        publicKeyLst.add(lineArr[2]);
//                    }
//                }
//            }
//        }
//        catch(IOException e){
//            e.printStackTrace();
//        }
//        
//        String allTransaction = "";
//        String [] splitArray;
//        int cnt = 0;
//        Symmetric symm = new Symmetric();
//
//        DefaultTableModel model;
//        model = (DefaultTableModel)tableTransac.getModel();
//        model.setRowCount(0);
//        try{
//            for(String index: indexLst){
//                String publicKeyString = publicKeyLst.get(cnt);
//                byte[] decodedKey = Base64.getDecoder().decode(publicKeyString);
//                SecretKey originalKey = new SecretKeySpec(decodedKey, 0, decodedKey.length, "AES");
//                long datetime = bc.get().get(Integer.parseInt(index)).getBlockHeader().getTimeStamp();
//                Date date = new Date(datetime);
//                SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
//                String formattedDateTime = dateFormat.format(date);
//                String transaction = bc.get().get(Integer.parseInt(index)).getTranx().getTranxLst().get(0);
//                splitArray = transaction.split(" , ");
//                if(splitArray.length == 11){
//                    Object[] rowData = new Object[]{splitArray[0], splitArray[1], splitArray[10], splitArray[3]};
//                    model.addRow(rowData);
//                }
//                cnt++;
//            }
//        }catch(Exception e){
//            e.printStackTrace();
//        }
//
//    }
    
    public ViewTransactionPage_version2(){}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableTransac = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblTitle.setFont(new java.awt.Font("Tempus Sans ITC", 3, 36)); // NOI18N
        lblTitle.setText("View Transaction Page");

        tableTransac.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Sender", "OrderID", "Vehicle Plate", "Current Location"
            }
        ));
        jScrollPane1.setViewportView(tableTransac);

        btnBack.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTitle)
                    .addComponent(btnBack))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_btnBackActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewTransactionPage_version2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewTransactionPage_version2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewTransactionPage_version2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewTransactionPage_version2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewTransactionPage_version2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tableTransac;
    // End of variables declaration//GEN-END:variables
}
